/*
create a table to calculate the 30-day retention for each day in the year
*/
SELECT
    joined AS day_joined,
    COUNT (player_id) AS players_joined,
      -- # players joined on a given day
    SUM (retained_flag) AS players_retained,
      -- since flag set to 1/0 we can sum the flag = 1 to get the # players
      -- who joined on a given day who were retained
    (SUM (retained_flag) / COUNT (player_id)) AS fractional_retention
      -- 30-day retention = retained/joined
FROM
    (
/*
using the results of the nested calc below, set a flag for whether each player
was retained or not; use 1/0 so mathematical sums can be performed on the flag column
*/
    SELECT
        player_id,
        joined,
        CASE
            WHEN diff_last_vs_joined > 30 THEN 1
              -- if diff > 30 then 1/TRUE ie retained
            ELSE 0
              -- ELSE 0/FALSE ie not retained
            END
            AS retained_flag
    FROM
        (
/*
using joined player and match tables, for each player calculate
the number of days between their most recent match and the day they joined
*/
        SELECT
            player_info.player_id AS player_id,
            player_info.joined AS joined,
            IFNULL (MAX (matches_info.day), player_info.joined) AS last_match_day,
              -- day index of most recent match; IFNULL sets last match day =
              -- joined where no matches played
            (MAX (matches_info.day) - player_info.joined) AS diff_last_vs_joined,
              -- days between most recent match and joining;
              -- prior IFNULL sets no matches played diff = 0
        FROM `thematic-scope-329421.game_co_data.player_info` AS player_info
        LEFT JOIN `thematic-scope-329421.game_co_data.matches_info` AS matches_info
          -- without the LEFT we lose any player who joined but never played a match
            ON matches_info.player_id = player_info.player_id
        GROUP BY -- required to combine existing fields with fields containing aggregations
            player_info.player_id,
            player_info.joined
        ) as calc_days
    ) as retained_calc
/*
and make the results ready for export to a visualization tool
*/
GROUP BY day_joined -- aggregation to one record for each day
ORDER BY day_joined ASC -- put it in date order
